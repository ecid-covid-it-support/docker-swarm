version: "3.7"
services:
  vault:
    hostname: vault
    image: vault:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - RABBITMQ_MGT_BASE_URL=${RABBITMQ_MGT_BASE_URL}
      - RABBITMQ_MGT_PORT=${RABBITMQ_MGT_PORT}
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - VAULT_ADDR=https://localhost:8200
      - VAULT_SKIP_VERIFY=true
    volumes:
      - "./config/ocariot/vault/.keys:/etc/vault/.keys"
      - "./config/ocariot/vault/policies:/etc/vault/policies/"
      - "./config/ocariot/vault/.tokens:/etc/vault/.tokens/"
    command: initializing_vault.sh
    configs:
      - source: ocariot-vault-config
        target: /etc/vault/config.hcl
      - source: ocariot-init-vault-config
        target: /usr/bin/initializing_vault.sh
        mode: 0750
      - source: ocariot-create-token-vault-config
        target: /etc/vault/scripts/create_tokens.sh
        mode: 0750
      - source: ocariot-remove-token-vault-config
        target: /etc/vault/scripts/remove_tokens.sh
        mode: 0750
    ports:
      - ${VAULT_PORT}:8200
    secrets:
      - source: consul-ca-cert
        target: /etc/consul/.certs/ca.crt
        mode: 0660
      - source: consul-client-vault-key
        target: /etc/consul/.certs/client.key
        mode: 0660
      - source: consul-client-vault-cert
        target: /etc/consul/.certs/client.key.pub
        mode: 0660
      - source: vault-ca-cert
        target: /etc/vault/.certs/ca.crt
        mode: 0660
      - source: vault-server-key
        target: /etc/vault/.certs/server.key
        mode: 0660
      - source: vault-server-cert
        target: /etc/vault/.certs/server.cert
        mode: 0660
    depends_on:
      - consul
    logging:
      driver: json-file
      options:
        max-size: 100m

  consul:
    hostname: consul
    image: consul:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    volumes:
      - "consul-data:/consul/data"
    command:
      - sh
      - -c
      - consul agent -config-dir=/consul/config
    configs:
      - source: ocariot-consul-config
        target: /consul/config/config.json
    secrets:
      - source: consul-ca-cert
        target: /etc/consul/.certs/ca.crt
        mode: 0660
      - source: consul-server-key
        target: /etc/consul/.certs/server.key
        mode: 0660
      - source: consul-server-cert
        target: /etc/consul/.certs/server.cert
        mode: 0660
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-account:
    hostname: psmdb-account
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-account-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-account:/tmp/access-token-psmdb-account"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-iot-tracking:
    hostname: psmdb-iot-tracking
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-iot-tracking-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-iot-tracking:/tmp/access-token-psmdb-iot-tracking"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-ds-agent:
    hostname: psmdb-ds-agent
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-ds-agent-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-ds-agent:/tmp/access-token-psmdb-ds-agent"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-quest:
    hostname: psmdb-quest
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-quest-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-quest:/tmp/access-token-psmdb-quest"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-gamification:
    hostname: psmdb-gamification
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-gamification-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-gamification:/tmp/access-token-psmdb-gamification"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-food:
    hostname: psmdb-food
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-food-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-food:/tmp/access-token-psmdb-food"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmdb-notification:
    hostname: psmdb-notification
    image: percona/percona-server-mongodb:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    volumes:
      - "psmdb-notification-data:/data/db"
      - "./config/ocariot/vault/.tokens/access-token-psmdb-notification:/tmp/access-token-psmdb-notification"
    command: initializing_psmdb.sh
    configs:
      - source: ocariot-mongo-config
        target: /tmp/base_conf_mongod
      - source: ocariot-init-psmdb-config
        target: /usr/bin/initializing_psmdb.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  psmysql-missions:
    hostname: psmysql-missions
    image: percona/percona-server:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - MYSQL_ROOT_PASSWORD=secret
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-psmysql-missions:/tmp/access-token-psmysql-missions"
      - "psmysql-missions-data:/var/lib/mysql"
    command: initializing_psmysql.sh
    configs:
      - source: ocariot-mysql-config
        target: /etc/my.cnf
        mode: 0444
      - source: ocariot-init-psmysql-config
        target: /usr/bin/initializing_psmysql.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0644
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  redis-api-gateway:
    hostname: ocariot-redis-api-gateway
    image: redis:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    volumes:
      - "redis-api-gateway-data:/data"
      - "./config/ocariot/redisdb/redis.conf:/etc/redis.conf"
    command: ["redis-server", "/etc/redis.conf"]
    logging:
      driver: json-file
      options:
        max-size: 100m

  redis-ds-agent: # Redis container for the Data Sync Agent
    hostname: ocariot-redis-ds-agent
    image: redis:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    volumes:
      - "redis-ds-agent-data:/data"
      - "./config/ocariot/redisdb/redis.conf:/etc/redis.conf"
    command: ["redis-server", "/etc/redis.conf"]
    logging:
      driver: json-file
      options:
        max-size: 100m

  api-gateway:
    hostname: api-gateway-service
    image: ocariot/api-gateway:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PORT_HTTP=8080
      - PORT_HTTPS=8081
      - SSL_KEY_PATH=/etc/.certs/server.key
      - SSL_CERT_PATH=/etc/.certs/server.cert
      - ISSUER=ocariot
      - API_GATEWAY_SERVICE=https://api-gateway:8081
      - ACCOUNT_SERVICE=https://account:3001
      - IOT_TRACKING_SERVICE=https://iot-tracking:4001
      - DS_AGENT_SERVICE=https://ds-agent:5001
      - QUESTIONNAIRE_SERVICE=https://quest:6001
      - GAMIFICATION_SERVICE=https://gamification:7001
      - MISSION_SERVICE=https://gamification:7001
      - FOOD_SERVICE=https://food:8001
      - EMULATE_REDIS=false
      - PORT_REDIS=6379
      - HOST_REDIS=redis-api-gateway
    command: initializing_api_gateway.sh
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-api-gateway-service:/tmp/access-token-api-gateway-service"
    ports:
      - ${AG_PORT_HTTP}:8080
      - ${AG_PORT_HTTPS}:8081
    configs:
      - source: ocariot-init-api-gateway-config
        target: /usr/bin/initializing_api_gateway.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
      - source: api-gateway-server-key
        target: /etc/.certs/server.key
        mode: 0660
      - source: api-gateway-server-cert
        target: /etc/.certs/server.cert
        mode: 0660
    depends_on:
      - redis-api-gateway
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  account:
    hostname: account-service
    image: ocariot/account:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PORT_HTTP=3000
      - PORT_HTTPS=3001
      - ISSUER=ocariot
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-account-service:/tmp/access-token-account-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-account
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  iot-tracking:
    hostname: iot-tracking-service
    image: ocariot/iot-tracking:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PORT_HTTP=4000
      - PORT_HTTPS=4001
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-iot-tracking-service:/tmp/access-token-iot-tracking-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-iot-tracking
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  ds-agent:
    hostname: ds-agent-service
    image: ocariot/ds-agent:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PORT_HTTP=5000
      - PORT_HTTPS=5001
      - FITBIT_CLIENT_ID=${FITBIT_CLIENT_ID}
      - FITBIT_CLIENT_SECRET=${FITBIT_CLIENT_SECRET}
      - EXPRESSION_AUTO_SYNC=${EXPRESSION_AUTO_SYNC}
      - REDIS_URI=redis://redis-ds-agent:6379
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-ds-agent-service:/tmp/access-token-ds-agent-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-ds-agent
      - redis-ds-agent
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  quest:
    hostname: quest-service
    image: ocariot/quest:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PROTOCOL=https
      - PORT=6001
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-quest-service:/tmp/access-token-quest-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-quest
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  gamification:
    hostname: gamification-service
    image: ocariot/gamification:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PROTOCOL=https
      - PORT=7001
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-gamification-service:/tmp/access-token-gamification-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-gamification
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  food:
    hostname: food-service
    image: ocariot/food:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PROTOCOL=https
      - PORT=8001
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-food-service:/tmp/access-token-food-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-food
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  notification-service: # Container for OCARIoT Notification service
    hostname: notification-service
    image: notification:latest
    user: root
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=production
      - PORT_HTTPS=10001
      - KEYSTORE_PATH=/etc/.certs/certificate.p12
      - KEYSTORE_PASS=${KEYSTORE_PASS}
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/keys/firebase_keyfile.json
      - TRUSTSTORE_PATH=/usr/lib/jvm/java-1.8-openjdk/jre/lib/security/cacerts
    volumes:
      - ${FIREBASE_KEYFILE_PATH}:/etc/keys/firebase_keyfile.json:ro
      - "./config/ocariot/vault/.tokens/access-token-notification-service:/tmp/access-token-notification-service"
    entrypoint: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmdb-notification
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  missions:
    hostname: missions-service
    image: ocariot/missions:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
      - NODE_ENV=development
      - PORT=8000
      - SSL_PORT=8001
      - DATABASE_DIALECT=mysql
      - DATABASE_HOST=psmysql-missions
      - DATABASE_PORT=3306
      - DATABASE_SSL=true
      - UPLOAD_VOLUME=/files/
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-missions-service:/tmp/access-token-missions-service"
    command: initializing_service.sh
    configs:
      - source: ocariot-init-service-config
        target: /usr/bin/initializing_service.sh
        mode: 0750
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
    depends_on:
      - psmysql-missions
      - rabbitmq
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

  rabbitmq:
    hostname: rabbitmq
    image: ocariot/rabbitmq:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 15
    environment:
      - RABBITMQ_MGT_BASE_URL=${RABBITMQ_MGT_BASE_URL}
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_PORT=${VAULT_PORT}
    entrypoint: initializing_rabbitmq.sh
    volumes:
      - "./config/ocariot/vault/.tokens/access-token-rabbitmq:/tmp/access-token-rabbitmq"
      - "rabbitmq-data:/var/lib/rabbitmq"
    configs:
      - source: ocariot-init-rabbitmq-config
        target: /usr/bin/initializing_rabbitmq.sh
        mode: 0750
      - source: ocariot-rabbitmq-conf
        target: /etc/rabbitmq/rabbitmq.conf
        mode: 0750
      - source: ocariot-rabbitmq-plugins
        target: /etc/rabbitmq/enabled_plugins
        mode: 0750
    ports:
      - ${RABBITMQ_MGT_PORT:-15671}:15671
    secrets:
      - source: vault-ca-cert
        target: /tmp/vault/ca.crt
        mode: 0640
      - source: rabbitmq-ca-cert
        target: /etc/.certs/mgmt_ca.crt
        mode: 0660
      - source: rabbitmq-server-key
        target: /etc/.certs/mgmt_server.key
        mode: 0660
      - source: rabbitmq-server-cert
        target: /etc/.certs/mgmt_server.cert
        mode: 0660
    depends_on:
      - vault
    logging:
      driver: json-file
      options:
        max-size: 100m

secrets:
  vault-server-key:
    file: ${VAULT_KEY_PATH}
  vault-server-cert:
    file: ${VAULT_CERT_PATH}
  vault-ca-cert:
    file: ${VAULT_CA_CERT_PATH}
  consul-server-key:
    file: config/ocariot/consul/.certs/server.key
  consul-server-cert:
    file: config/ocariot/consul/.certs/server.crt
  consul-ca-cert:
    file: config/ocariot/consul/.certs/ca.crt
  consul-client-vault-key:
    file: config/ocariot/vault/.certs/consul_client_vault.key
  consul-client-vault-cert:
    file: config/ocariot/vault/.certs/consul_client_vault.crt
  rabbitmq-server-key:
    file: ${RABBITMQ_MGMT_KEY_PATH}
  rabbitmq-server-cert:
    file: ${RABBITMQ_MGT_CERT_PATH}
  rabbitmq-ca-cert:
    file: ${RABBITMQ_MGT_CA_CERT_PATH}
  api-gateway-server-key:
    file: ${AG_KEY_PATH}
  api-gateway-server-cert:
    file: ${AG_CERT_PATH}

configs:
  ocariot-vault-config:
    file: config/ocariot/vault/config.hcl
  ocariot-consul-config:
    file: config/ocariot/consul/config.json
  ocariot-rabbitmq-conf:
    file: config/ocariot/rabbitmq/rabbitmq.conf
  ocariot-rabbitmq-plugins:
    file: config/ocariot/rabbitmq/enabled_plugins
  ocariot-mongo-config:
    file: config/ocariot/psmdb/mongod.conf
  ocariot-mysql-config:
    file: config/ocariot/psmysql/my.cnf
  ocariot-create-token-vault-config:
    file: config/ocariot/vault/scripts/create_tokens.sh
  ocariot-remove-token-vault-config:
    file: config/ocariot/vault/scripts/remove_tokens.sh
  ocariot-init-vault-config:
    file: config/ocariot/vault/scripts/initializing_vault.sh
  ocariot-init-rabbitmq-config:
    file: config/ocariot/rabbitmq/scripts/initializing_rabbitmq.sh
  ocariot-init-service-config:
    file: config/ocariot/service/scripts/initializing_service.sh
  ocariot-init-psmdb-config:
    file: config/ocariot/psmdb/scripts/initializing_psmdb.sh
  ocariot-init-psmysql-config:
    file: config/ocariot/psmysql/scripts/initializing_psmysql.sh
  ocariot-init-api-gateway-config:
    file: config/ocariot/api-gateway/scripts/initializing_api_gateway.sh

volumes:
  psmdb-account-data:
    name: ocariot-psmdb-account-data
  psmdb-ds-agent-data:
    name: ocariot-psmdb-ds-agent-data
  psmdb-iot-tracking-data:
    name: ocariot-psmdb-iot-tracking-data
  psmdb-food-data:
    name: ocariot-psmdb-food-data
  psmdb-quest-data:
    name: ocariot-psmdb-quest-data
  psmdb-gamification-data:
    name: ocariot-psmdb-gamification-data
  psmdb-notification-data:
    name: ocariot-psmdb-notification-data
  psmysql-missions-data:
    name: ocariot-psmysql-missions-data
  consul-data:
    name: ocariot-consul-data
  rabbitmq-data:
    name: ocariot-rabbitmq-data
  redis-api-gateway-data:
    name: ocariot-redis-api-gateway-data
  redis-ds-agent-data:
    name: ocariot-redis-ds-agent-data
